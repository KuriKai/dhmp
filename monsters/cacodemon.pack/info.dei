title: DHMP Cacodemon
version: 20181026-1825
license: Attribution-NonCommercial-ShareAlike 4.0 International https://creativecommons.org/licenses/by-nc-sa/4.0/
tags: monster cacodemon

#exported at 0.14

########################
#Set up the model
########################
asset model.thing.head {
  path = "caco.fbx"
  front <0, 0, 1>
  up <0, 1, 0>

  #++++++++++++++++++++++++
  #set up the textures for the model
  #++++++++++++++++++++++++
  material {
    variant "material_body" {
      mesh_caco_alive {
        diffuseMap = "textures/body_d.png"
        normalMap = "textures/body_n.png"
        specularMap = "textures/body_gs.png"
        emissiveMap = "textures/black_e.png"
      }
      mesh_guts { #eye
        diffuseMap = "textures/eye_d.png"
        normalMap = "textures/eye_n.png"
        specularMap = "textures/eye_gs.png"
        emissiveMap = "textures/eye_e.png"
      }
    }
    variant "material_body_death" {
      mesh_caco_death {
        diffuseMap = "textures/body_dead_d.png"
        normalMap = "textures/body_dead_n.png"
        specularMap = "textures/body_dead_gs.png"
        emissiveMap = "textures/black_e.png"
      }
    }
    variant "material_lightning" {
      mesh_lightning {
        diffuseMap = "textures/teeth_d.png"
        normalMap = "textures/black_e.png"
        specularMap = "textures/black_e.png"
        emissiveMap = "textures/teeth_d.png"
      }
    }
    variant "material_blood" {
      mesh_blood {
        diffuseMap = "textures/blood.png"
        normalMap = "textures/blood_n.png"
        specularMap = "textures/blood_gs.png"
        emissiveMap = "textures/black_e.png"
      }
    }
  }



  #++++++++++++++++++++++++
  #set up the rendering of the skin
  #++++++++++++++++++++++++
  render {
    pass "render_pass_body" {
      shader = "model.skeletal.generic"
      material = "material_body"
      meshes <mesh_caco_alive> #meshes
      enabled = True
      variable uAlpha          { value = 1 }
      variable uAlphaLimit     { value = 0 }
      variable uColor          { value <1, 1, 1> }
      variable uEmission       { value = 0 }
      variable uGlossiness     { value = 24 }
      variable uReflection     { value = 0 }
      variable uReflectionBlur { value = 40 }
      variable uSpecular       { value = 1.4 }
    }
    pass "render_pass_eye" {
      shader = "model.skeletal.generic"
      material = "material_body"
      meshes <mesh_guts> #meshes
      enabled = True
      variable uAlpha          { value = 1 }
      variable uAlphaLimit     { value = 0 }
      variable uColor          { value <1, 1, 1> }
      variable uEmission       { value = 0 }
      variable uGlossiness     { value = 60 }
      variable uReflection     { value = 0.6 }
      variable uReflectionBlur { value = 0.5 }
      variable uSpecular       { value = 3 }
    }
    pass "render_pass_death" {
      shader = "model.skeletal.generic"
      material = "material_body_death"
      meshes <mesh_caco_death> #meshes
      enabled = False
      variable uAlpha          { value = 1 }
      variable uAlphaLimit     { value = 0 }
      variable uColor          { value <1, 1, 1> }
      variable uEmission       { value = 0 }
      variable uGlossiness     { value = 24 }
      variable uReflection     { value = 0 }
      variable uReflectionBlur { value = 40 }
      variable uSpecular       { value = 1.4 }
    }
    pass "render_pass_lightning" {
      shader = "model.caco.uvscroll"
      material = "material_lightning"
      meshes <mesh_lightning>
      enabled = False
      variable uAlpha          { value = 1 }
      variable uAlphaLimit     { value = 0 }
      variable uColor          { value <1, 1, 1> }
      variable uEmission       { value = 2 }
      variable uGlossiness     { value = 6 }
      variable uReflection     { value = 1 }
      variable uReflectionBlur { value = 10 }
      variable uSpecular       { value = 0.6 }
    }
    pass "render_pass_blood" {
      shader = "model.skeletal.generic"
      material = "material_blood"
      meshes <mesh_blood>
      enabled = False
      variable uAlpha          { value = 0.86 }
      variable uAlphaLimit     { value = 0 }
      variable uColor          { value <0.3, 0, 0.5> }
      variable uEmission       { value = 0 }
      variable uGlossiness     { value = 15 }
      variable uReflection     { value = 0.8 }
      variable uReflectionBlur { value = 4.2 }
      variable uSpecular       { value = 0.5 }
    }
  }

  #++++++++++++++++++++++++
  #setup the animations
  #++++++++++++++++++++++++
  animation {
    #-----------------
    #setup different timeline changes
    #-----------------
    timeline "stand" {
      script at 0 {
      render_pass_death.enabled = False
      render_pass_body.enabled = True
      render_pass_lightning.enabled = False
      }
    }
    timeline "run" {
      script at 0 {
      render_pass_death.enabled = False
      render_pass_body.enabled = True
      render_pass_lightning.enabled = False
      render_pass_eye.uEmission.setValue (0, 0.1)
      }
    }
    timeline "pain" {
      script at 0.1 {
      render_pass_lightning.enabled = False
      render_pass_body.uEmission.setValue (0, 0.1)
      render_pass_eye.uEmission.setValue (0, 0.1)
      }
    }
    timeline "attack" {
      script at 0 {
        render_pass_lightning.enabled = True
        render_pass_eye.uEmission.setValueFrom (0, 2.0, 0.5)
      }
    }
    timeline "attack" {
      script at 0 {
        render_pass_death.enabled = False
        render_pass_body.enabled = True
      }
    }
    timeline "close" {
      script at 0 {
        render_pass_body.uEmission.setValueFrom (2.0, 0, 0.4)
        render_pass_eye.uEmission.setValueFrom (2.0, 0, 0.4)
      }
      script at 0.6 {
        render_pass_lightning.enabled = False
      }
    }
    timeline "death" {
      script at 0 {
        render_pass_death.enabled = True
        render_pass_body.enabled = False
        render_pass_lightning.enabled = False
        render_pass_body.uEmission.setValue (0, 0.1)
        render_pass_eye.uEmission.setValue (0, 0.1)
      }
      script at 0.5 {
        render_pass_blood.enabled = True
      }
    }

    #-----------------
    #setup the states(e.g. attacking, dying, walking)
    #-----------------
  state HEAD_STND {
      sequence arm_caco|wait {
  	prob = 0.3
        timeline = stand
        looping = True
      }
      sequence arm_caco|wait_2 {
  	prob = 0.3
        timeline = stand
        looping = True
      }
      sequence arm_caco|wait_3 {
        prob = 1
        timeline = stand
        looping = True
        }
    }
    state HEAD_RUN1 {
      sequence arm_caco|walk {
  	prob = 0.5
        priority = 2
        timeline = run
        #looping = True
      }
     #I crash doomsday for some reason, so commenting out for now
     # sequence arm_caco|walk_2 {
     #	#priority = 2
     #   timeline = run
     #   #looping = True
     # }
    }
    state HEAD_PAIN {
      sequence arm_caco|pain {
        priority = 4
        timeline = pain
      }
    }
    state HEAD_ATK1 { #aim
      sequence arm_caco|aim {
        priority = 3
        timeline = aim
        #this make the animation start from begining if state is hit again
        #this makes sure it always show and attack aniumation when it fires a ball at you
        #alwaysTrigger = True
      }
    }
    state HEAD_ATK2 { #attack
      sequence arm_caco|attack {
        priority = 3
        timeline = attack
        #this make the animation start from begining if state is hit again
        #this makes sure it always show and attack aniumation when it fires a ball at you
        alwaysTrigger = True
      }
    }
    state HEAD_ATK3 { #attack
      sequence arm_caco|close {
        priority = 3
        timeline = close
        #this make the animation start from begining if state is hit again
        #this makes sure it always show and attack aniumation when it fires a ball at you
        alwaysTrigger = True
      }
    }
    state HEAD_DIE1 {
      sequence arm_caco|death {
        prob = 0.5
        #we want dieing to take priority over everything
        priority = 5
        timeline = death
      }
      sequence arm_caco|death_2 {
        #we want dieing to take priority over everything
        priority = 5
        timeline = death
      }
    }
  }
}
