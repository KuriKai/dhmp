title: DHMP Evil Eye
version: 20180218-0057
license: Attribution-NonCommercial-ShareAlike 4.0 International https://creativecommons.org/licenses/by-nc-sa/4.0/
tags: evil eye

#exported at 0.18

########################
#Set up the model
########################
asset model.thing.misc38 {
  path = "evileye.fbx"
  front <0, 0, 1>
  up <0, 1, 0>
 #alignment.yaw = view

  #++++++++++++++++++++++++
  #set up the textures for the model
  #++++++++++++++++++++++++
  material {
     mesh_smoke {
​        diffuseMap = "textures/smoke.png"
​        normalMap = "textures/smoke.png"
​      	specularMap = "textures/smoke.png"
​      	emissiveMap = "textures/smoke.png"
​      }
​      mesh_circle1 {
​        diffuseMap = "textures/clouds.png"
​        normalMap = "textures/clouds.png"
​      	specularMap = "textures/clouds.png"
​      	emissiveMap = "textures/clouds.png"
​      }
​      mesh_circle4 {
​       diffuseMap = "textures/clouds.png"
​       normalMap = "textures/clouds.png"
​       specularMap = "textures/clouds.png"
​       emissiveMap = "textures/clouds.png"
​      }
​      mesh_circle2 {
​        diffuseMap = "textures/clouds.png"
​        normalMap = "textures/clouds.png"
​      	specularMap = "textures/clouds.png"
​      	emissiveMap = "textures/clouds.png"
​      }
​      mesh_circle3 {
​        diffuseMap = "textures/clouds.png"
​        normalMap = "textures/clouds.png"
​      	specularMap = "textures/clouds.png"
​      	emissiveMap = "textures/clouds.png"
​      }
​      mesh_eyeball {
​        diffuseMap = "textures/obj_eyeball Base Color.png"
​        normalMap = "textures/e.png"
​      	specularMap = "textures/obj_eyeball Base Color.png"
​      	emissiveMap = "textures/obj_eyeball Base Color.png"
​      }
​      mesh_arrow {
​        diffuseMap = "textures/effects.png"
​        normalMap = "textures/e.png"
​      	specularMap = "textures/effects.png"
​      	emissiveMap = "textures/effects.png"
​      }
  }

  #++++++++++++++++++++++++
  #set up the rendering of the skin
  #++++++++++++++++++++++++
  render {
    pass "render_smoke" {
      shader = "model.skeletal.generic"
      material = "material_smoke"
      meshes <mesh_smoke>
      enabled = True
      variable uAlpha          { value = 1 }
      variable uAlphaLimit     { value = 0 }
      variable uColor          { value <1, 1, 1> }
      variable uEmission       { value = 0 }
      variable uGlossiness     { value = 100 }
      variable uOffsetUV       { value <0, 0> }
      variable uReflection     { value = 1 }
      variable uReflectionBlur { value = 10 }
      variable uSpecular       { value = 4 }
    }
    pass "render_eyeball" {
      shader = "model.skeletal.opaque.generic"
      material = "material_eyeball"
      meshes <mesh_eyeball>
      enabled = True
      variable uAlpha          { value = 1 }
      variable uAlphaLimit     { value = 0 }
      variable uColor          { value <1, 1, 1> }
      variable uEmission       { value = 0 }
      variable uGlossiness     { value = 100 }
      variable uOffsetUV       { value <0, 0> }
      variable uReflection     { value = 1 }
      variable uReflectionBlur { value = 10 }
      variable uSpecular       { value = 4 }
    }
    pass "render_circle3" {
      shader = "model.skeletal.generic"
      material = "material_effects3"
      meshes <mesh_circle3>
      enabled = True
      depthWrite = False
      variable uAlpha          { value = 1 }
      variable uAlphaLimit     { value = 0 }
      variable uColor          { value <1, 1, 1> }
      variable uEmission       { value = 1 }
      variable uGlossiness     { value = 0 }
      variable uOffsetUV       { value <0, 0> }
      variable uReflection     { value = 0 }
      variable uReflectionBlur { value = 0 }
      variable uSpecular       { value = 0 }
    }
    pass "render_circle2" {
      shader = "model.skeletal.generic"
      material = "material_effects2"
      meshes <mesh_circle2>
      enabled = True
      depthWrite = False
      variable uAlpha          { value = 1 }
      variable uAlphaLimit     { value = 0 }
      variable uColor          { value <1, 1, 1> }
      variable uEmission       { value = 1 }
      variable uGlossiness     { value = 0 }
      variable uOffsetUV       { value <0, 0> }
      variable uReflection     { value = 0 }
      variable uReflectionBlur { value = 0 }
      variable uSpecular       { value = 0 }
    }
    pass "render_circle1" {
      shader = "model.skeletal.generic"
      material = "material_effects"
      meshes <mesh_circle1, mesh_circle1.2>
      enabled = True
      depthWrite = False
      variable uAlpha          { value = 1 }
      variable uAlphaLimit     { value = 0 }
      variable uColor          { value <1, 1, 1> }
      variable uEmission       { value = 1 }
      variable uGlossiness     { value = 0 }
      variable uOffsetUV       { value <0, 0> }
      variable uReflection     { value = 0 }
      variable uReflectionBlur { value = 0 }
      variable uSpecular       { value = 0 }
    }
    pass "render_arrow" {
      shader = "model.skeletal.veirdo.arrow"
      material = "material_arrow"
      meshes <mesh_arrow>
      enabled = true
      depthWrite = false
      blendFunc <SrcAlpha, One>
    variable uAlphaMultiplier       { value = 1 }
    variable uAlphaPower            { value = 1 }
    variable uDiffuseMultiplier     { value <1, 1, 1> }
    variable uFresnelTranspPow      { value = 1 }
    variable uMainOffset            { value <0, 0> }
    variable uMainScaleUV           { value <1, 0> }
    variable uMainSpeedUV           { value <0, 2> }
    variable uNoiseMultiplier       { value = 0 }
#    variable uNoiseMultiplier       { value = 0.001 }
    variable uNoiseScaleUV          { value <0.2, 0.4> }
    variable uNoiseSpeedUV          { value <0.01, 0.35> }
    }

  }

  #++++++++++++++++++++++++
  #setup the animations
  #++++++++++++++++++++++++
  animation {

   variable circleRotation{
      speed = 6
	#axis chaingun rotates around
      axis <0, -1, 0>
	#bone that is affected by the rotation(child bones will also be affected of the chosen bone)
      node = "circle1"
   }
  variable circleRotation2{
      speed = 4
	#axis chaingun rotates around
      axis <0, 1, 0>
	#bone that is affected by the rotation(child bones will also be affected of the chosen bone)
      node = "circle2"
   }
   variable circleRotation3{
       speed = 2
 	#axis chaingun rotates around
       axis <0, 1, 0>
 	#bone that is affected by the rotation(child bones will also be affected of the chosen bone)
       node = "circle3"
    }
   variable arrowRotation{
      speed = 80
	#axis chaingun rotates around
      axis <0, 0, 1>
	#bone that is affected by the rotation(child bones will also be affected of the chosen bone)
      node = "arrow"
   }

    #-----------------
    #setup different timeline changes
    #-----------------
    
    #-----------------
    #setup the states(e.g. attacking, dying, walking)
    #-----------------
    state EVILEYE {
      sequence Armature|wait {
    	  prob = 1.0
    	  looping = True
    	}
      }
  }
}
