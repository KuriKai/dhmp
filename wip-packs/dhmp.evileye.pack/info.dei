title: DHMP evil eye
version: 20221225.1106
license: Attribution-NonCommercial-ShareAlike 4.0 International https://creativecommons.org/licenses/by-nc-sa/4.0/
tags: doom evil eye

#requires <dhmp.common.pack>

#map 2 4 doom
#exported at 0.18

########################
#Set up the model
########################
asset model.thing.misc38 {
  path = "evileye.fbx"
  front <0, 0, 1>
  up <0, 1, 0>
  #offset <-1, -15, 15>
    offset <0, 0, 0>


  #++++++++++++++++++++++++
  #set up the textures for the model
  #++++++++++++++++++++++++
  material {
    variant "material-circle" { # use the normal textures
      mesh-circle { #this says which mesh the material will be used with
        #Multiply adds another texture ontop of the first using multiplying blending
        diffuseMap = "textures/green.png"
        normalMap = "textures/green.png"
        specularMap = "textures/green.png"
        emissiveMap = "textures/green.png"
      }
    }
    variant "material-arrow" { # use the normal textures
      mesh-arrow { #this says which mesh the material will be used with
        #Multiply adds another texture ontop of the first using multiplying blending
        diffuseMap = "textures/green.png"
        normalMap = "textures/noise3d_flame.png"
        specularMap = "textures/noise3d_flame.png"
        emissiveMap =  "textures/smoke.png"
      }
    }
    variant "material-triangle" { # use the normal textures
      mesh-triangle { #this says which mesh the material will be used with
        #Multiply adds another texture ontop of the first using multiplying blending
        diffuseMap = "textures/green.png"
        normalMap = "textures/noise3d_flame.png"
        specularMap = "textures/noise3d_flame.png"
        emissiveMap = "textures/green.png"
      }
    }
  }




  #++++++++++++++++++++++++
  #set up the rendering of the skin
  #++++++++++++++++++++++++
  render {
      pass "render_circle" {
      shader = "model.skeletal.generic"
      material = "material-circle" #make the render pass use the m_body material
      meshes <mesh-circle> #make this render pass use the 2nd model
      enabled = false
      #enabled = False
      variable uAlpha          { value = 1 }
      variable uAlphaLimit     { value = 0 }
      variable uColor          { value <1, 1, 1> }
      variable uEmission       { value = 0 }
      variable uGlossiness     { value = 36 }
      variable uOffsetUV       { value <0, 0> }
      variable uReflection     { value = 0 }
      variable uReflectionBlur { value = 0 }
      variable uSpecular       { value = 1.3 }
    }
      pass "render_arrow" {
      shader = "model.skeletal.veirdo.fire"
      material = "material-arrow" #make the render pass use the m_body material
      meshes <mesh-arrow> #make this render pass use the 0st model
      #enabled = True
      enabled = False
      #allow other transperent thigns to render through this one
      depthWrite = False
      variable uAlphaMultiplier       { value = 2 }
      variable uAlphaPower            { value = 1 }
      variable uDiffuseMultiplier     { value <1, 1, 1> }
      variable uFresnelTranspPow      { value = 0.40 }
      variable uMainOffset            { value <1, 1.02> }
      variable uMainScaleUV           { value <1, 1> }
      variable uMainSpeedUV           { value <0, 0> }
      variable uNoiseMultiplier       { value = 0.002 }
      variable uNoiseScaleUV          { value <1, 1> }
      variable uNoiseSpeedUV          { value <-1, 0> }
    }
    pass "render_triangle" {
      shader = "model.skeletal.veirdo.fire"
      material = "material-triangle"
      meshes <mesh-triangle>
      enabled = true
      #depthFunc = Always
      depthWrite = False
      variable uAlphaMultiplier       { value = 0.70 }
      variable uAlphaPower            { value = 0.60 }
      variable uDiffuseMultiplier     { value <1, 1, 1> }
      variable uFresnelTranspPow      { value = 0 }
      variable uMainOffset            { value <1, 1.10> }
      variable uMainScaleUV           { value <1, 1> }
      variable uMainSpeedUV           { value <0, 0> }
      variable uNoiseMultiplier       { value = 0.05 }
      variable uNoiseScaleUV          { value <2, 2> }
      variable uNoiseSpeedUV          { value <0, 2> }
    }
  }
  
  #++++++++++++++++++++++++
  #setup the animations
  #++++++++++++++++++++++++
  animation {
    variable arrowRotation{
     angle = 60
      speed = 20
	#axis chaingun rotates around
      axis <0, 0, 1>
	#bone that is affected by the rotation(child bones will also be affected of the chosen bone)
      node = "arrow"
    }
    #-----------------
    #setup different timeline changes
    #-----------------
     #timeline "timeline_fire" {
     #   script at 0 {
     #  }
     #}
     #timeline "timeline_wait" {
     #   script at 0 {
     #     render_flame_front.enabled = False
     #     render_flame_back.enabled = False
     #     render_pass_blur.enabled = False
#	}
     #}
    #-----------------
    #setup the states(e.g. attacking, dying, walking)
    #-----------------
     #A_WeaponReady
     state EVILEYE {
        sequence arm|wait {
  	  prob = 1.0
  	  looping = FALSE
	  #timeline = timeline_wait
  	}
     }
  }
}
