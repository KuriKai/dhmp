title: DHMP plasma projectile
version: 20180218-0057
license: Attribution-NonCommercial-ShareAlike 4.0 International https://creativecommons.org/licenses/by-nc-sa/4.0/
tags: plasma projectile

#requires <com.hiriwa.dhmp.dhmp.common>
#exported at 0.20
#include ded's
#defsPath = "defs"

########################
#Set up the model
########################
asset model.thing.misc12 {
#asset model.thing.plasma {
  path = "plasma.fbx"
  front <0, 0, 1>
  up <0, 1, 0>
  offset <0, 18, 0>
 #alignment.yaw = view
 #alignment.pitch = view
   #alignment.yaw = random

  #++++++++++++++++++++++++
  #set up the textures for the model
  #++++++++++++++++++++++++
  material {
    variant "material-filament" {
      mesh-filament {
        diffuseMap = "textures/filament.png"
        normalMap = "textures/noise3d_flame.png"
        specularMap = "textures/filament.png"
      	emissiveMap = "textures/filament.png"
      }
      mesh-filament-b {
        diffuseMap = "textures/filament.png"
        normalMap = "textures/noise3d_flameb.png"
        specularMap = "textures/filament.png"
      	emissiveMap = "textures/filament.png"
      }
      mesh-filament-c {
        diffuseMap = "textures/filament.png"
        normalMap = "textures/noise3d_flamec.png"
        specularMap = "textures/filament.png"
      	emissiveMap = "textures/filament.png"
      }
      mesh-filament-d {
        diffuseMap = "textures/filament.png"
        normalMap = "textures/noise3d_flamed.png"
        specularMap = "textures/filament.png"
      	emissiveMap = "textures/filament.png"
      }
    }
    variant "material-inner" {
      mesh-inner {
        diffuseMap = "textures/inner.png"
        #normalMap = "textures/computermap_box_n.png"
      	specularMap = "textures/inner.png"
      	emissiveMap = "textures/inner.png"
      }
    }
    variant "material-in" {
      mesh-in {
        diffuseMap = "textures/in.png"
        normalMap = "textures/noise3d_flame.png"
      	#specularMap = "textures/in.png"
      	emissiveMap = "textures/in.png"
      }
      mesh-in-b {
        diffuseMap = "textures/in.png"
        normalMap = "textures/noise3d_flame.png"
      	#specularMap = "textures/in.png"
      	emissiveMap = "textures/in.png"
      }
      mesh-in-c {
        diffuseMap = "textures/in.png"
        normalMap = "textures/noise3d_flame.png"
      	#specularMap = "textures/in.png"
      	emissiveMap = "textures/in.png"
      }
      mesh-in-d {
        diffuseMap = "textures/in.png"
        normalMap = "textures/noise3d_flame.png"
      	#specularMap = "textures/in.png"
      	emissiveMap = "textures/in.png"
      }
    }
    variant "material-outer" {
      mesh-outer {
        diffuseMap = "textures/outer.png"
        normalMap = "textures/outer.png"
      	specularMap = "textures/outer.png"
      	emissiveMap = "textures/outer.png"
      }
    }
  }

  #++++++++++++++++++++++++
  #set up the rendering of the skin
  #++++++++++++++++++++++++
  render {
  #furthest back first
    
    pass "render_inner" {
      shader = "model.skeletal.veirdo.generic"
      material = "material-inner"
      meshes <mesh-inner>
      enabled = True
      #depthWrite = false
      #blendFunc <SrcAlpha, OneMinusDestColor>
      depthFunc = LessOrEqual
      variable uAlpha          { value = 1 }
      variable uAlphaLimit     { value = 0 }
      variable uColor          { value <1, 1, 1> }
      variable uEmission       { value = 2 }
      variable uGlossiness     { value = 0 }
      variable uOffsetUV       { value <0, 0> }
      variable uSpeedUV        { value <0, 0> }
      variable uScaleUV        { value <1, 1> }
      variable uReflection     { value = 0 }
      variable uReflectionBlur { value = 0 }
      variable uSpecular       { value = 0 }
    }
    pass "render_in" {
      shader = "model.skeletal.veirdo.fire"
      material = "material-in"
      meshes <mesh-in, mesh-in-b, mesh-in-c, mesh-in-d>
      enabled = True
      depthWrite = false
      #blendFunc <SrcAlpha, OneMinusDestColor>
      #depthFunc = Always
     variable uAlphaMultiplier       { value = 1.5 }
      variable uAlphaPower            { value = 1 }
      variable uDiffuseMultiplier     { value <1, 1, 1> }
      variable uFresnelTranspPow      { value = 0 }
      variable uMainOffset            { value <0, 0> }
      variable uMainScaleUV           { value <1, 1> }
      variable uMainSpeedUV           { value <0, 0> }
      variable uNoiseMultiplier       { value = 0.01 }
      variable uNoiseScaleUV          { value <0.05, 0.05> }
      variable uNoiseSpeedUV          { value <0, 0.02> }
    }
    pass "render_filament" {
      shader = "model.skeletal.veirdo.fire"
      material = "material-filament"
      meshes <mesh-filament, mesh-filament-c, mesh-filament-d>
      enabled = True
      depthWrite = false
      #blendFunc <SrcAlpha, OneMinusDestColor>
      depthFunc = LessOrEqual
      variable uAlphaMultiplier       { value = 1.5 }
      variable uAlphaPower            { value = 1 }
      variable uDiffuseMultiplier     { value <1, 1, 1> }
      variable uFresnelTranspPow      { value = 0 }
      variable uMainOffset            { value <0, 0> }
      variable uMainScaleUV           { value <1, 1> }
      variable uMainSpeedUV           { value <0, 0> }
      variable uNoiseMultiplier       { value = 0.06 }
      variable uNoiseScaleUV          { value <0.01, 0.27> }
      variable uNoiseSpeedUV          { value <0.13, 0.02> }
    }
    pass "render_filamentb" {
      shader = "model.skeletal.veirdo.fire"
      material = "material-filament"
      meshes <mesh-filament-b>
      enabled = True
      depthWrite = false
      #blendFunc <SrcAlpha, OneMinusDestColor>
      depthFunc = LessOrEqual
      variable uAlphaMultiplier       { value = 1.5 }
      variable uAlphaPower            { value = 1 }
      variable uDiffuseMultiplier     { value <1, 1, 1> }
      variable uFresnelTranspPow      { value = 0 }
      variable uMainOffset            { value <0, 0> }
      variable uMainScaleUV           { value <1, 1> }
      variable uMainSpeedUV           { value <0, 0> }
      variable uNoiseMultiplier       { value = 0.06 }
      variable uNoiseScaleUV          { value <0.01, 0.27> }
      variable uNoiseSpeedUV          { value <0.13, 0.02> }
    }
    pass "render_outer" {
      shader = "model.skeletal.veirdo.generic"
      material = "material-outer"
      meshes <mesh-outer>
      enabled = True
      #depthWrite = false
      #blendFunc <SrcAlpha, OneMinusDestColor>
      #depthFunc = Always
      variable uAlpha          { value = 0.2 }
      variable uAlphaLimit     { value = 0 }
      variable uColor          { value <1, 1, 1> }
      variable uEmission       { value = 0 }
      variable uGlossiness     { value = 0 }
      variable uOffsetUV       { value <0, 0> }
      variable uSpeedUV        { value <0, 0> }
      variable uScaleUV        { value <1, 1> }
      variable uReflection     { value = 0 }
      variable uReflectionBlur { value = 0 }
      variable uSpecular       { value = 0 }
    }
  }

  #++++++++++++++++++++++++
  #setup the animations
  #++++++++++++++++++++++++
  animation {
   variable RotationFilament{
      #bone that is affected by the rotation(child bones will also be affected of the chosen bone)
      node = "filament"
      #speed
      speed = 0
      #angle
      angle = 5
      #axis plasma rotates around
      axis <0, -1, 0>
	
    }
    variable RotationFilamentb{
      #bone that is affected by the rotation(child bones will also be affected of the chosen bone)
      node = "filamentb"
      #speed
      speed = 0
      #angle
      angle = 5
      #axis plasma rotates around
      axis <0, -1, 0>
    }
    variable RotationFilamentc{
      #bone that is affected by the rotation(child bones will also be affected of the chosen bone)
      node = "filamentc"
      #speed
      speed = 0
      #angle
      angle = 5
      #axis plasma rotates around
      axis <0, -1, 0>
    }
    variable RotationFilamentd{
      #bone that is affected by the rotation(child bones will also be affected of the chosen bone)
      node = "filamentd"
      #speed
      speed = 0
      #angle
      angle = 5
      #axis plasma rotates around
      axis <0, -1, 0>
    }
     #-----------------
    #setup different timeline changes
    #-----------------

    #-----------------
    #setup the states(e.g. attacking, dying, walking)
    #-----------------
    #state PLASBALL {
    state SOUL {
      sequence arm|wait {
        SalwaysTrigger = true
        #mustFinish = true
  	prob = 1
  	#duration = 2.4
  	looping = true
      }
    }
  }
}
