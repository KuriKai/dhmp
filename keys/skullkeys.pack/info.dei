title: DHMP Skull Keys
version: 20220908-1032
license: Attribution-NonCommercial-ShareAlike 4.0 International https://creativecommons.org/licenses/by-nc-sa/4.0/
tags: skull key pickup item hidden

#Add the word "hidden" to the tag to hide the pack from the loading page(usefull when inside a collective pack)

#requires <dhmp.common.pack>
#include ded's
defsPath = "defs"

#exported at 0.10

########################
#Set up the model
########################
#yellow skullkey
asset model.thing.misc7 {
  path = "skullkey.fbx"
  front <0, 0, 1>
  up <0, 1, 0>

  material {
    variant "material_key" { # use the normal textures
      mesh_key { #this says which mesh the material will be used with
        #Multiply adds another texture ontop of the first using multiplying blending
        diffuseMap = "textures/skull_yellow_d.png"
        normalMap = "textures/skull_n.png"
        specularMap = "textures/skull_gs.png"
        emissiveMap = "textures/skull_yellow_e.png"
      }
    }
  }

  render {
    pass "render_pass_key" {
      shader = "model.skeletal.opaque.generic"
      material = "material_key"
      meshes <mesh_key>
      enabled = True
      variable uAlpha          { value = 1 }
      variable uAlphaLimit     { value = 0 }
      variable uColor          { value <1, 1, 1> }
      variable uEmission       { value = 0.5 }
      variable uGlossiness     { value = 23 }
      variable uOffsetUV       { value <0, 0> }
      variable uReflection     { value = 0 }
      variable uReflectionBlur { value = 0 }
      variable uSpecular       { value = 2 }
    }
  }

  #++++++++++++++++++++++++
  #setup the animations
  #++++++++++++++++++++++++
    animation {
    timeline "timeline_flash" {
      script at 1.0 {
        render_pass_key.uEmission.setValueFrom (1, 0, 1)
      }
    }
    #-----------------
    #setup the states(e.g. attacking, dying, walking)
    #-----------------
    state YSKULL {
      sequence arm|key_wait {
  	prob = 1.0
        duration = 3
  	looping = true
        timeline = timeline_flash
  	}
    }
  }
}

########################
#Set up the model
########################
#red skullkey
asset model.thing.misc8 {
  path = "skullkey.fbx"
  front <0, 0, 1>
  up <0, 1, 0>

  material {
    variant "material_key" { # use the normal textures
      mesh_key { #this says which mesh the material will be used with
        #Multiply adds another texture ontop of the first using multiplying blending
        diffuseMap = "textures/skull_red_d.png"
        normalMap = "textures/skull_n.png"
        specularMap = "textures/skull_gs.png"
        emissiveMap = "textures/skull_red_e.png"
      }
    }
  }

  render {
    pass "render_pass_key" {
      shader = "model.skeletal.opaque.generic"
      material = "material_key"
      meshes <mesh_key>
      enabled = True
      variable uAlpha          { value = 1 }
      variable uAlphaLimit     { value = 0 }
      variable uColor          { value <1, 1, 1> }
      variable uEmission       { value = 0.5 }
      variable uGlossiness     { value = 23 }
      variable uOffsetUV       { value <0, 0> }
      variable uReflection     { value = 0 }
      variable uReflectionBlur { value = 0 }
      variable uSpecular       { value = 2 }
    }
  }

  #++++++++++++++++++++++++
  #setup the animations
  #++++++++++++++++++++++++
  animation {
    timeline "timeline_flash" {
      script at 0.8 {
        render_pass_key.uEmission.setValueFrom (1, 0, 1)
      }
    }
    #-----------------
    #setup the states(e.g. attacking, dying, walking)
    #-----------------
    state RSKULL {
      sequence arm|key_wait {
  	prob = 1.0
        duration = 3
  	looping = true
        timeline = timeline_flash
  	}
    }
  }
}

########################
#Set up the model
########################
#blue skullkey
asset model.thing.misc9 {
  path = "skullkey.fbx"
  front <0, 0, 1>
  up <0, 1, 0>

  material {
    variant "material_key" { # use the normal textures
      mesh_key { #this says which mesh the material will be used with
        #Multiply adds another texture ontop of the first using multiplying blending
        diffuseMap = "textures/skull_blue_d.png"
        normalMap = "textures/skull_n.png"
        specularMap = "textures/skull_gs.png"
        emissiveMap = "textures/skull_blue_e.png"
      }
    }
  }

  render {
    pass "render_pass_key" {
      shader = "model.skeletal.opaque.generic"
      material = "material_key"
      meshes <mesh_key>
      enabled = True
      variable uAlpha          { value = 1 }
      variable uAlphaLimit     { value = 0 }
      variable uColor          { value <1, 1, 1> }
      variable uEmission       { value = 0 }
      variable uGlossiness     { value = 23 }
      variable uOffsetUV       { value <0, 0> }
      variable uReflection     { value = 0 }
      variable uReflectionBlur { value = 0 }
      }
  }


  #++++++++++++++++++++++++
  #setup the animations
  #++++++++++++++++++++++++
  animation {
    timeline "timeline_flash" {
      script at 1.2 {
        render_pass_key.uEmission.setValueFrom (1, 0, 1)
      }
    }
    #-----------------
    #setup the states(e.g. attacking, dying, walking)
    #-----------------
    state BSKULL {
      sequence arm|key_wait {
  	prob = 1.0
        duration = 3
  	looping = true
        timeline = timeline_flash
  	}
    }
  }
}
