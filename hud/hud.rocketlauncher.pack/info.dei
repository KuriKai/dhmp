title: DHMP HUD Rocket Launcher
version: 20221225.1106
license: Attribution-NonCommercial-ShareAlike 4.0 International https://creativecommons.org/licenses/by-nc-sa/4.0/
tags: doom weapon

#requires <dhmp.common.pack>

#exported at 0.30

########################
#Set up the model
########################
asset model.weapon.missile {
  path = "rocketlauncher-hud.fbx"
  front <0, 0, 1>
  up <0, 1, 0>
  #offset <-1, -15, 15>
    offset <-1, -50, 15>


  #++++++++++++++++++++++++
  #set up the textures for the model
  #++++++++++++++++++++++++
  material {
    variant "material_rocket_launcher" { # use the normal textures
      mesh_rocketlauncher { #this says which mesh the material will be used with
        #Multiply adds another texture ontop of the first using multiplying blending
        diffuseMap = "textures/rocketlauncher_d.png"
        normalMap = "textures/rocketlauncher_n.png"
        specularMap = "textures/rocketlauncher_gs.png"
        emissiveMap = "textures/glow.png"
      }
    }
    variant "material-flame-front" { # use the normal textures
      mesh-flame-front { #this says which mesh the material will be used with
        #Multiply adds another texture ontop of the first using multiplying blending
        diffuseMap = "textures/smoke.png"
        normalMap = "textures/noise3d_flame.png"
        specularMap = "textures/noise3d_flame.png"
        emissiveMap =  "textures/smoke.png"
      }
    }
    variant "material-flame-back" { # use the normal textures
      mesh-flame-back { #this says which mesh the material will be used with
        #Multiply adds another texture ontop of the first using multiplying blending
        diffuseMap = "textures/fire2.png"
        normalMap = "textures/noise3d_flame.png"
        specularMap = "textures/noise3d_flame.png"
        emissiveMap = "textures/fire2.png"
      }
    }
  }




  #++++++++++++++++++++++++
  #set up the rendering of the skin
  #++++++++++++++++++++++++
  render {
      pass "render_pass_rocket_launcher" {
      shader = "model.skeletal.generic"
      material = "material_rocket_launcher" #make the render pass use the m_body material
      meshes <mesh_rocketlauncher> #make this render pass use the 2nd model
      enabled = True
      #enabled = False
      variable uAlpha          { value = 1 }
      variable uAlphaLimit     { value = 0 }
      variable uColor          { value <1, 1, 1> }
      variable uEmission       { value = 0 }
      variable uGlossiness     { value = 36 }
      variable uOffsetUV       { value <0, 0> }
      variable uReflection     { value = 0 }
      variable uReflectionBlur { value = 0 }
      variable uSpecular       { value = 1.3 }
    }
      pass "render_flame_front" {
      shader = "model.skeletal.veirdo.fire"
      material = "material-flame-front" #make the render pass use the m_body material
      meshes <mesh-flame-front> #make this render pass use the 0st model
      #enabled = True
      enabled = False
      #allow other transperent thigns to render through this one
      depthWrite = False
      variable uAlphaMultiplier       { value = 2 }
      variable uAlphaPower            { value = 1 }
      variable uDiffuseMultiplier     { value <1, 1, 1> }
      variable uFresnelTranspPow      { value = 0.40 }
      variable uMainOffset            { value <1, 1.02> }
      variable uMainScaleUV           { value <1, 1> }
      variable uMainSpeedUV           { value <0, 0> }
      variable uNoiseMultiplier       { value = 0.002 }
      variable uNoiseScaleUV          { value <1, 1> }
      variable uNoiseSpeedUV          { value <-1, 0> }
    }
    pass "render_flame_back" {
      shader = "model.skeletal.veirdo.fire"
      material = "material-flame-back"
      meshes <mesh-flame-back>
      enabled = False
      #depthFunc = Always
      variable uAlphaMultiplier       { value = 0.70 }
      variable uAlphaPower            { value = 0.60 }
      variable uDiffuseMultiplier     { value <1, 1, 1> }
      variable uFresnelTranspPow      { value = 0 }
      variable uMainOffset            { value <1, 1.10> }
      variable uMainScaleUV           { value <1, 1> }
      variable uMainSpeedUV           { value <0, 0> }
      variable uNoiseMultiplier       { value = 0.01 }
      variable uNoiseScaleUV          { value <2, 2> }
      variable uNoiseSpeedUV          { value <0, 2> }
    }
  }
  
  #++++++++++++++++++++++++
  #setup the animations
  #++++++++++++++++++++++++
  animation {
    #-----------------
    #setup different timeline changes
    #-----------------
     timeline "timeline_fire" {
        script at 0 {
          #turn off the body object and turn on the death object
          
          #render_flame_back.enabled = True
          #render_flame_back.uAlphaMultiplier.setValueFrom (2, 0, 0.3)
          
          render_pass_rocket_launcher.uEmission.setValueFrom (2, 0, 0.4)
          
          render_flame_front.enabled = True
          render_flame_front.uAlphaMultiplier.setValueFrom (2, 0.5, 0.4, 0.1)
          render_flame_front.uFresnelTranspPow.setValueFrom (0, 0.40, 0.4, 0.1)
          render_flame_front.uFresnelTranspPow.setValueFrom (0.40, 0, 0, 0.5)
        
          
    
       }
     }
     timeline "timeline_wait" {
        script at 0 {
          render_flame_front.enabled = False
          render_flame_back.enabled = False
	}
     }
    #-----------------
    #setup the states(e.g. attacking, dying, walking)
    #-----------------
     #A_WeaponReady
     state MISSILE {
        sequence arm_hud_rocketlauncher|wait {
  	  prob = 1.0
  	  looping = FALSE
	  timeline = timeline_wait
  	}
     }
     #A_WeaponRefire
#     state MISSILE3 {
#        sequence arm_hud_rocketlauncher|fire {
#	  #timeline = timeline_fire
#  	  prob = 1.0
#  	  looping = FALSE
#  	}
#     }
     #A_GunFlash
     state MISSILE1 {
        sequence arm_hud_rocketlauncher|fire {
	  timeline = timeline_fire
	  alwaysTrigger = true
  	  prob = 1.0
  	  looping = True
  	}
     }
     #A_Raise
     state MISSILEUP {
        sequence arm_hud_rocketlauncher|up {
  	  prob = 1.0
  	  looping = False
	  timeline = timeline_wait
  	}
     }
     #A_Lower
     state MISSILEDOWN {
        sequence arm_hud_rocketlauncher|down {
  	  prob = 1.0
  	  looping = False
	  timeline = timeline_wait
  	}
     }
  }
}
