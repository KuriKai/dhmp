title: DHMP HUD shotgun
version: 20170921.01
license: Attribution-NonCommercial-ShareAlike 4.0 International https://creativecommons.org/licenses/by-nc-sa/4.0/
tags: doom weapon hidden

#requires <dhmp.common.pack>

#exported at 0.08

########################
#Set up the model
########################
asset model.weapon.sgun {
  path = "shotgun-hud.fbx"
  front <0, 0, 1>
  up <0, 1, 0>
  offset <0, -2.1, -4.2>
#  fov = 38
  fov = 50
#    offset <0, -5, 0>


  #++++++++++++++++++++++++
  #set up the textures for the model
  #++++++++++++++++++++++++
  material {
    variant "material_shotgun" { # use the normal textures
      mesh_shotgun { #this says which mesh the material will be used with
        #Multiply adds another texture ontop of the first using multiplying blending
        diffuseMap = "textures/shotgun_d.png"
        normalMap = "textures/shotgun_n.png"
        specularMap = "textures/shotgun_gs.png"
        emissiveMap = "textures/black_e.png"
      }
    }
    variant "material_arm" { # use the normal textures
      mesh_hud_leftarm_lp { #this says which mesh the material will be used with
        diffuseMap = "textures/arm_diffuse.png"
        normalMap = "textures/arm_normal.png"
        specularMap = "textures/arm_gs.png"
        emissiveMap = "textures/black_e.png"
      }
    }
    variant "material_glove" { # use the normal textures
      mesh_hud_glove_lp { #this says which mesh the material will be used with
        diffuseMap = "textures/glove_diffuse.png"
        normalMap = "textures/glove_normal.png"
        specularMap = "textures/glove_gs.png"
        emissiveMap = "textures/black_e.png"
      }
    }
    variant "material_flash" {
      mesh_hud_flash {
        diffuseMap = "textures/shotblast_front.png"
        emissiveMap = "textures/shotblast_front.png"
      }
    }
  }




  #++++++++++++++++++++++++
  #set up the rendering of the skin
  #++++++++++++++++++++++++
  render {
    pass "render_pass_shotgun" {
      shader = "model.skeletal.generic"
      material = "material_shotgun" #make the render pass use the m_body material
      meshes <mesh_shotgun> #make this render pass use the 2nd model
      enabled = True
      #enabled = False
      variable uAlpha          { value = 1 }
      variable uAlphaLimit     { value = 0 }
      variable uColor          { value <1, 1, 1> }
      variable uEmission       { value = 0 }
      variable uGlossiness     { value = 15 }
      variable uOffsetUV       { value <0, 0> }
      variable uReflection     { value = 0.50 }
      variable uReflectionBlur { value = 10 }
      variable uSpecular       { value = 1 }
    }
    pass "render_pass_arm" {
      shader = "model.skeletal.generic"
      material = "material_arm" #make the render pass use the m_body material
      meshes <mesh_hud_leftarm_lp> #make this render pass use the 2nd model
      enabled = True
      #enabled = False
      variable uAlpha          { value = 1 }
      variable uAlphaLimit     { value = 0 }
      variable uColor          { value <1, 1, 1> }
      variable uEmission       { value = 0 }
      variable uGlossiness     { value = 200 }
      variable uOffsetUV       { value <0, 0> }
      variable uReflection     { value = 0 }
      variable uReflectionBlur { value = 0 }
      variable uSpecular       { value = 0.2 }
    }
    pass "render_pass_glove" {
      shader = "model.skeletal.generic"
      material = "material_glove" #make the render pass use the m_body material
      meshes <mesh_hud_glove_lp> #make this render pass use the 2nd model
      enabled = True
      #enabled = False
      variable uAlpha          { value = 1 }
      variable uAlphaLimit     { value = 0 }
      variable uColor          { value <1, 1, 1> }
      variable uEmission       { value = 0 }
      variable uGlossiness     { value = 15 }
      variable uOffsetUV       { value <0, 0> }
      variable uReflection     { value = 0 }
      variable uReflectionBlur { value = 0 }
      variable uSpecular       { value = 0.5 }
    }
    pass "render_flash" {
      shader = "model.skeletal.opaque.generic"
      material = "material_flash"
      meshes <mesh_hud_flash>
      enabled = False
      variable uAlpha          { value = 0.6 }
      variable uAlphaLimit     { value = 0 }
      variable uColor          { value <1, 1, 1> }
      variable uEmission       { value = 1.5 }
      variable uGlossiness     { value = 0 }
      variable uOffsetUV       { value <0, 0> }
      variable uReflection     { value = 0 }
      variable uReflectionBlur { value = 0 }
      variable uSpecular       { value = 0 }
    }
  }

  #++++++++++++++++++++++++
  #setup the animations
  #++++++++++++++++++++++++
  animation {
    #-----------------
    #setup different timeline changes
    #-----------------
    timeline "timeline_fire" {
      script at 0 {
        render_flash.enabled = True
        render_flash.uAlpha.setValue (0.6)
      }
      script at 0.1 {
        #set the alpha from 0.6 to 0 over 0.2 seconds with no delay
        render_flash.uAlpha.setValueFrom (0.6, 0, 0.2)
      }
    }
    timeline "timeline_notfire" {
      script at 0 {
        #render_flash.enabled = False
      }
    }
    #-----------------
    #setup the states(e.g. attacking, dying, walking)
    #-----------------
    #A_WeaponReady
    state SGUN {
      sequence arm_hud_s|hud_wait {
        prob = 0.5
        looping = True
        timeline = timeline_notfire
      }
      sequence arm_hud_s|hud_wait2 {
        prob = 0.5
        looping = True
        timeline = timeline_notfire
      }
      #check side of gun
      sequence arm_hud_s|hud_wait3 {
        prob = 0.5
        looping = True
        timeline = timeline_notfire
      }
    }
    #A_WeaponRefire
    state SGUN2 {
      sequence arm_hud_s|hud_fire {
  	    prob = 1.0
        looping = FALSE
        timeline = timeline_fire
      }
    }
    #A_GunFlash
    state SGUN3 {
      sequence arm_hud_s|hud_reload {
        timeline = timeline_notfire
        prob = 1.0
        looping = False
      }
    }
    #A_Raise
    state SGUNUP {
      sequence arm_hud_s|hud_up {
        prob = 1.0
        looping = False
        timeline = timeline_notfire
  	  }
     }
     #A_Lower
     state SGUNDOWN {
      sequence arm_hud_s|hud_down {
        prob = 1.0
        looping = False
        timeline = timeline_notfire
      }
    }
  }
}
