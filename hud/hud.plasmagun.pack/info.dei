title: DHMP HUD plasmarifle
version: 20221128-0001
license: Attribution-NonCommercial-ShareAlike 4.0 International https://creativecommons.org/licenses/by-nc-sa/4.0/
tags: doom weapon hidden
#requires <common>

#exported at 0.08
#include ded's
#defsPath = "defs"

########################
#Set up the model
########################
asset model.weapon.plasma {
  path = "plasmacannon-hud.fbx"
  front <1, 0, 0>
  up <0, 1, 0>
  offset <-0.8, -4, 6>
  fov = 80

  #++++++++++++++++++++++++
  #set up the textures for the model
  #++++++++++++++++++++++++
  material {
  	variant "material-flash" { # use the normal textures
      mesh-flash { #this says which mesh the material will be used with
        diffuseMap = "textures/flash.png"
        normalMap = "textures/black_e.png"
        specularMap = "textures/black_e.png"
        emissiveMap = "textures/flash.png"
      }
    }
  	variant "material-body" { # use the normal textures
      mesh-body { #this says which mesh the material will be used with
        diffuseMap = "textures/plasmarifle_body_d.png"
        normalMap = "textures/plasmarifle_body_n.png"
        specularMap = "textures/plasmarifle_body_gs.png"
        emissiveMap = "textures/plasmarifle_body_fireglow_l.png"
      }
    }
    variant "material-head" { # use the normal textures
      mesh-head { #this says which mesh the material will be used with
        diffuseMap = "textures/plasmarifle_body_d.png"
        normalMap = "textures/plasmarifle_body_n.png"
        specularMap = "textures/plasmarifle_body_gs.png"
        emissiveMap = "textures/plasmarifle_body_fireglow_l.png"
      }
    }
    variant "material-glove" { # use the normal textures
      mesh-glove { #this says which mesh the material will be used with
        diffuseMap = "textures/glove_diffuse.png"
        normalMap = "textures/glove_normal.png"
        specularMap = "textures/glove_gs.png"
        emissiveMap = "textures/black_e.png"
      }
    }
    
  }
  #++++++++++++++++++++++++
  #set up the rendering of the skin
  #++++++++++++++++++++++++
  render {#order the passes: farthest to closest
    pass "render_glove" {
      shader = "model.skeletal.generic"
      material = "material-glove" #make the render pass use the m_body material
      meshes <mesh-glove> #make this render pass use the 2nd model
      enabled = True
      variable uAlpha          { value = 1 }
      variable uAlphaLimit     { value = 0 }
      variable uColor          { value <1, 1, 1> }
      variable uEmission       { value = 0 }
      variable uGlossiness     { value = 17 }
      variable uOffsetUV       { value <0, 0> }
      variable uReflection     { value = 0.25 }
      variable uReflectionBlur { value = 10 }
      variable uSpecular       { value = 0.7 }
    }
    pass "render_flash" {
      shader = "model.skeletal.generic"
      material = "material-flash" #make the render pass use the m_body material
      meshes <mesh-flash> #make this render pass use the 2nd model
      enabled = false
      #depthFunc = Equal
      depthWrite = false
      variable uAlpha          { value = 0.2 }
      variable uAlphaLimit     { value = 0 }
      variable uColor          { value <1, 1, 1> }
      variable uEmission       { value = 1 }
      variable uGlossiness     { value = 0 }
      variable uOffsetUV       { value <0, 0> }
      variable uReflection     { value = 0 }
      variable uReflectionBlur { value = 0 }
      variable uSpecular       { value = 0 }
    }
    pass "render_head" {
      shader = "model.skeletal.generic"
      material = "material-head" #make the render pass use the m_body material
      meshes <mesh-head> #make this render pass use the 2nd model
      enabled = True
      variable uAlpha          { value = 1 }
      variable uAlphaLimit     { value = 0 }
      variable uColor          { value <1, 1, 1> }
      variable uEmission       { value = 0 }
      variable uGlossiness     { value = 17 }
      variable uOffsetUV       { value <0, 0> }
      variable uReflection     { value = 0.25 }
      variable uReflectionBlur { value = 10 }
      variable uSpecular       { value = 0.7 }
    }
    pass "render_body" {
      shader = "model.skeletal.generic"
      material = "material-body" #make the render pass use the m_body material
      meshes <mesh-body> #make this render pass use the 2nd model
      enabled = True
      variable uAlpha          { value = 1 }
      variable uAlphaLimit     { value = 0 }
      variable uColor          { value <1, 1, 1> }
      variable uEmission       { value = 0 }
      variable uGlossiness     { value = 17 }
      variable uOffsetUV       { value <0, 0> }
      variable uReflection     { value = 0.25 }
      variable uReflectionBlur { value = 10 }
      variable uSpecular       { value = 0.7 }
    }
  }
  #++++++++++++++++++++++++
  #setup the animations
  #++++++++++++++++++++++++
  animation {
  #-----------------
  #setup variables, e.g. rotations
  #-----------------
  
  #-----------------
  #setup different timeline changes
  #-----------------
		timeline "timeline_fire" {
		  script at 0 {
		  	render_flash.enabled = True
		  	render_head.uEmission.setValue (1)
		  }
		}
		timeline "timeline_notfire" {
		  script at 0 {
		  	render_flash.enabled = False
		  	render_head.uEmission.setValue ( 0.3 )
		  }
		}
  #-----------------
  #setup the states(e.g. attacking, dying, walking)
  #-----------------
    #A_WeaponReady
    state PLASMA {
      sequence arm_gun|hud_wait {
        prob = 1
        looping = true
        timeline = timeline_notfire
      }
    }
    #A_WeaponRefire
    state PLASMA1 {
      sequence arm_gun|hud_fire {
  	    prob = 1.0
        looping = false
        timeline = timeline_fire
        alwaysTrigger = true
      }
    }
    #A_GunFlash
    state PLASMA2 {
      sequence arm_gun|hud_reload {
        timeline = timeline_notfire
        prob = 1.0
        looping = False
      }
    }
    #A_Raise
    state PLASMAUP {
      sequence arm_gun|hud_up {
        prob = 1.0
        looping = False
        timeline = timeline_notfire
  	  }
     }
     #A_Lower
     state PLASMADOWN {
      sequence arm_gun|hud_down {
        prob = 1.0
        looping = False
        timeline = timeline_notfire
      }
    }
  }
}
